{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport { GlobalConstants } from '../shared/global-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/user.service\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"ngx-ui-loader\";\nimport * as i6 from \"../services/snackbar.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/toolbar\";\nimport * as i12 from \"@angular/flex-layout/flex\";\n\nfunction LoginComponent_mat_error_11_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is mandatory\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_11_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is invalid\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, LoginComponent_mat_error_11_span_1_Template, 2, 0, \"span\", 8);\n    i0.ɵɵtemplate(2, LoginComponent_mat_error_11_span_2_Template, 2, 0, \"span\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loginForm.controls.email.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loginForm.controls.email.errors.pattern);\n  }\n}\n\nfunction LoginComponent_mat_error_16_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is mandatory\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_16_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This field is invalid\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, LoginComponent_mat_error_16_span_1_Template, 2, 0, \"span\", 8);\n    i0.ɵɵtemplate(2, LoginComponent_mat_error_16_span_2_Template, 2, 0, \"span\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loginForm.controls.email.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loginForm.controls.email.errors.pattern);\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(formBuider, router, userService, dialogRef, ngxService, snackbarService) {\n      this.formBuider = formBuider;\n      this.router = router;\n      this.userService = userService;\n      this.dialogRef = dialogRef;\n      this.ngxService = ngxService;\n      this.snackbarService = snackbarService;\n      this.loginForm = FormGroup;\n    }\n\n    ngOnInit() {\n      this.loginForm = this.formBuider.group({\n        email: [null, [Validators.required, Validators.pattern(GlobalConstants.emailRegex)]]\n      });\n    }\n\n    handleSubmit() {\n      this.ngxService.start();\n      var formData = this.loginForm.value;\n      var data = {\n        email: formData.email,\n        password: formData.password\n      };\n      this.userService.login(data).subscribe(response => {\n        this.ngxService.stop();\n        this.dialogRef.close();\n        localStorage.setItem('token', response.token);\n        this.router.navigate(['/cafe/dashboard']);\n      }, error => {\n        var _a, _b;\n\n        this.ngxService.stop();\n\n        if ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) {\n          this.responseMessage = (_b = error.error) === null || _b === void 0 ? void 0 : _b.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n\n        this.snackbarService.openSnackbar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(i5.NgxUiLoaderService), i0.ɵɵdirectiveInject(i6.SnackbarService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 22,\n    vars: 4,\n    consts: [[\"color\", \"primary\"], [\"fxLayout\", \"\"], [1, \"title-center\"], [1, \"mat-typography\"], [3, \"formGroup\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\"], [\"apparence\", \"fill\", \"fxFlex\", \"\"], [\"matInput\", \"\", \"formControlName\", \"email\", \"required\", \"\"], [4, \"ngIf\"], [\"align\", \"center\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"mat-dialog-close\", \"\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"mat-toolbar-row\", 1)(2, \"span\", 2);\n        i0.ɵɵtext(3, \"Login\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"mat-dialog-content\", 3)(5, \"form\", 4)(6, \"div\", 5)(7, \"mat-form-field\", 6)(8, \"mat-label\");\n        i0.ɵɵtext(9, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 7);\n        i0.ɵɵtemplate(11, LoginComponent_mat_error_11_Template, 3, 2, \"mat-error\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\", 6)(13, \"mat-label\");\n        i0.ɵɵtext(14, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 7);\n        i0.ɵɵtemplate(16, LoginComponent_mat_error_16_Template, 3, 2, \"mat-error\", 8);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(17, \"mat-dialog-actions\", 9)(18, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_18_listener() {\n          return ctx.handleSubmit();\n        });\n        i0.ɵɵtext(19, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"button\", 11);\n        i0.ɵɵtext(21, \"Close\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.email.touched && ctx.loginForm.controls.email.invalid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.email.touched && ctx.loginForm.controls.email.invalid);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !(ctx.loginForm.valid && ctx.loginForm.dirty));\n      }\n    },\n    dependencies: [i7.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i8.MatButton, i4.MatDialogClose, i4.MatDialogContent, i4.MatDialogActions, i9.MatError, i9.MatFormField, i9.MatLabel, i10.MatInput, i11.MatToolbar, i11.MatToolbarRow, i12.DefaultLayoutDirective, i12.DefaultFlexDirective],\n    styles: [\".mat-toolbar[_ngcontent-%COMP%]{margin:-24px -24px 10px;width:auto}.title-center[_ngcontent-%COMP%]{flex:1 1 auto;text-align:center}mat-form-field[_ngcontent-%COMP%]{padding:5px}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}